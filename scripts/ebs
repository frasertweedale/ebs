#!/usr/bin/env python

# ebs - Evidence based scheduling program
# Copyright (C) 2011, 2012 Benon Technologies Pty Ltd, Fraser Tweedale
#
# ebs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse

import ebslib.command
import ebslib.config

# retrieve user-defined aliases
conf = ebslib.config.Config.get_config('~/.ebsrc')
if conf.has_section('alias'):
    aliases = dict(conf.items('alias'))
else:
    aliases = {}

# format the epilogue
epilog = None
lines = map(
    lambda (alias, target): "    {:20}{}".format(alias, target),
    aliases.viewitems()
)
epilog = 'user-defined aliases:\n' + '\n'.join(lines) if lines else None

# create an argument parser
_parser = argparse.ArgumentParser(add_help=False)

# add global arguments
_parser.add_argument('--version', action='version',
    version='%(prog)s {}'.format(ebslib.version))

# parse known args
args, argv = _parser.parse_known_args()

# add subcommands
parser = argparse.ArgumentParser(
    parents=[_parser],
    description='Perform evidence based scheduling.',
    epilog=epilog,
    formatter_class=argparse.RawDescriptionHelpFormatter
)
subparsers = parser.add_subparsers(title='subcommands')
commands = {x.__name__.lower(): x for x in ebslib.command.commands}
for name in sorted(commands):
    commands[name].add_parser(subparsers)

# process user-defined aliases
for i, arg in enumerate(argv):
    if arg in aliases:
        # an alias; replace and stop processing
        argv[i:i+1] = aliases[arg].split()
        break
    if arg in commands:
        # a valid command; stop processing
        break

# parse remaining args
args = parser.parse_args(args=argv, namespace=args)

# execute command
args.command(args, parser, commands, aliases)()
